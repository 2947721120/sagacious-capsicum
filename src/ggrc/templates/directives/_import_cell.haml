
-# This HAML file renders an individual cell based up type
-#   LinkDocuments, Link, Textor HTML or everything else

-#column_name = column_name.to_sym
-#cell = result[column_name]

-#td_class = cell.nil? ? '' : (cell.has_errors? ? 'member-failure' : (cell.has_warnings? ? 'member-warning' : '' ))

%td{ 'class': '' }

  -# set values to test

  -set cell = result[col_name]
  -set cell_handler = cell.__class__.__name__
  -set cell_handler_base = cell.__class__.__base__.__name__

  -if cell_handler == "LinkDocumentsHandler"
    -set first = True
    -for all_details in cell.links_with_details()
      -set status = all_details[0]
      -set document = all_details[1]
      -set value = all_details[2]
      -set errors = all_details[3]
      -set warnings = all_details[4]

      -if first
        -set first = False
      -else
        %hr

      -if status == "created"
        %span
          New link:
        %a{href:'{{document.link}}',rel:"tooltip",title:'{{document.link}}'}
          ={document.title or document.link}
      -elif status == "existing"
        %a{href:'{{document.link}}',rel:"tooltip",title:'{{document.link}}'}
          ={document.title or document.link}
      -else
        ={value}

  -elif "LinksHandler" == cell_handler_base
    -set first = True
    -for all_details in cell.links_with_details()
      -set status = all_details[0]
      -set object = all_details[1]
      -set value = all_details[2]
      -set errors = all_details[3]
      -set warnings = all_details[4]

      -if first
        -set first = False
      -else
        %hr

      -if status == "created"
        %span
          New link:
        ={cell.display_link(object)} 
      -elif status == "existing"
        ={cell.display_link(object)}
      -else
        ={value}

  -elif cell == "TextOrHtmlColumnHandler"
    ={cell.display()}
  -else
    {{cell.display()}}
